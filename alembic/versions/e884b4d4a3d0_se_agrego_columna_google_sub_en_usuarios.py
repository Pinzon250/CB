"""Se agrego columna 'google_sub' en usuarios

Revision ID: e884b4d4a3d0
Revises: 
Create Date: 2025-08-20 09:49:27.302345

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e884b4d4a3d0'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='auth'
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('phone_confirmed_at', sa.DateTime(), nullable=True),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('token_verification', sa.String(length=100), nullable=True),
    sa.Column('google_sub', sa.Text(), nullable=True),
    sa.Column('last_login_at', sa.DateTime(), nullable=True),
    sa.Column('banned_until', sa.DateTime(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('google_sub'),
    schema='auth'
    )
    op.create_index(op.f('ix_auth_users_email'), 'users', ['email'], unique=True, schema='auth')
    op.create_table('attributes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='catalog'
    )
    op.create_table('brands',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='catalog'
    )
    op.create_table('categories',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('parent_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['catalog.categories.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='catalog'
    )
    op.create_table('vendors',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('contact_email', sa.String(), nullable=True),
    sa.Column('contact_phone', sa.String(), nullable=True),
    sa.Column('api_base_url', sa.String(), nullable=True),
    sa.Column('api_key', sa.String(), nullable=True),
    sa.Column('webhook_secret', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code'),
    schema='catalog'
    )
    op.create_table('banners',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('image_url', sa.String(), nullable=False),
    sa.Column('link_url', sa.String(), nullable=True),
    sa.Column('placement', sa.String(), nullable=True),
    sa.Column('position', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('starts_at', sa.DateTime(), nullable=True),
    sa.Column('ends_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='content'
    )
    op.create_table('faqs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('question', sa.String(), nullable=False),
    sa.Column('answer', sa.Text(), nullable=False),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('position', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='content'
    )
    op.create_table('pages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('slug', sa.String(), nullable=False),
    sa.Column('excerpt', sa.String(), nullable=True),
    sa.Column('body', sa.Text(), nullable=True),
    sa.Column('seo_title', sa.String(), nullable=True),
    sa.Column('seo_description', sa.String(), nullable=True),
    sa.Column('is_published', sa.Boolean(), nullable=True),
    sa.Column('published_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug', name='uq_page_slug'),
    schema='content'
    )
    op.create_table('sliders',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code'),
    schema='content'
    )
    op.create_table('order_status',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code'),
    schema='orders'
    )
    op.create_table('coupons',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('discount_type', sa.String(), nullable=False),
    sa.Column('percentage', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('max_discount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('min_subtotal', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('currency', sa.String(length=3), nullable=True),
    sa.Column('start_at', sa.DateTime(), nullable=True),
    sa.Column('ends_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_stackable', sa.Boolean(), nullable=True),
    sa.Column('max_redemptions_total', sa.Integer(), nullable=True),
    sa.Column('max_redemptions_per_user', sa.Integer(), nullable=True),
    sa.Column('extras', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint("(discount_type <> 'fixed') OR (amount >= 0)", name='chk_coupon_amount_nonneg'),
    sa.CheckConstraint("(discount_type <> 'percent') OR (percentage BETWEEN 0 AND 100)", name='chk_coupon_percentage_range'),
    sa.CheckConstraint("(discount_type IN ('percent','fixed','free_shipping'))", name='chk_coupon_discount_type'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code'),
    schema='promotions'
    )
    op.create_table('carriers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('tracking_url_template', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code'),
    sa.UniqueConstraint('name'),
    schema='shipping'
    )
    op.create_table('user_roles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('role_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['auth.roles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='auth'
    )
    op.create_table('products',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('Description', sa.Text(), nullable=True),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('stock', sa.Numeric(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('category_id', sa.UUID(), nullable=True),
    sa.Column('brand_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['brand_id'], ['catalog.brands.id'], ),
    sa.ForeignKeyConstraint(['category_id'], ['catalog.categories.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='catalog'
    )
    op.create_table('page_blocks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('page_id', sa.UUID(), nullable=False),
    sa.Column('block_type', sa.String(), nullable=False),
    sa.Column('position', sa.Integer(), nullable=False),
    sa.Column('text', sa.Text(), nullable=True),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('link_url', sa.String(), nullable=True),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['page_id'], ['content.pages.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='content'
    )
    op.create_table('slider_items',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('slider_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('subtitle', sa.String(), nullable=True),
    sa.Column('image_url', sa.String(), nullable=False),
    sa.Column('link_url', sa.String(), nullable=True),
    sa.Column('position', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('starts_at', sa.DateTime(), nullable=True),
    sa.Column('ends_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['slider_id'], ['content.sliders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='content'
    )
    op.create_table('carts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', name='uq_cart_user'),
    schema='orders'
    )
    op.create_table('payment_methods',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('alias', sa.String(), nullable=True),
    sa.Column('method_type', sa.String(), nullable=False),
    sa.Column('provider', sa.String(), nullable=False),
    sa.Column('external_token', sa.String(), nullable=False),
    sa.Column('last4', sa.String(length=4), nullable=True),
    sa.Column('brand', sa.String(), nullable=True),
    sa.Column('exp_month', sa.String(), nullable=True),
    sa.Column('exp_year', sa.String(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'alias', name='uq_payment_method_alias_per_user'),
    schema='payments'
    )
    op.create_table('coupon_brands',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('coupon_id', sa.UUID(), nullable=False),
    sa.Column('brand_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['brand_id'], ['catalog.brands.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['coupon_id'], ['promotions.coupons.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('coupon_id', 'brand_id', name='uq_coupon_brand'),
    schema='promotions'
    )
    op.create_table('coupon_categories',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('coupon_id', sa.UUID(), nullable=False),
    sa.Column('category_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['catalog.categories.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['coupon_id'], ['promotions.coupons.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('coupon_id', 'category_id', name='uq_coupon_category'),
    schema='promotions'
    )
    op.create_table('addresses',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('address', sa.String(), nullable=False),
    sa.Column('city', sa.String(), nullable=False),
    sa.Column('state', sa.String(), nullable=False),
    sa.Column('country', sa.String(), nullable=False),
    sa.Column('postal_code', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='shipping'
    )
    op.create_table('product_attributes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=True),
    sa.Column('attribute_id', sa.UUID(), nullable=True),
    sa.Column('value', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['attribute_id'], ['catalog.attributes.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['catalog.products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='catalog'
    )
    op.create_table('product_images',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=True),
    sa.Column('image_url', sa.String(), nullable=False),
    sa.Column('alt_text', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['catalog.products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='catalog'
    )
    op.create_table('product_variants',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('sku', sa.String(), nullable=False),
    sa.Column('price_override', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('stock', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('price_override IS NULL OR price_override >= 0', name='chk_variant_price_nonneg'),
    sa.CheckConstraint('stock >= 0', name='chk_variant_stock_nonneg'),
    sa.ForeignKeyConstraint(['product_id'], ['catalog.products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('product_id', 'sku', name='uq_variant_product_sku'),
    schema='catalog'
    )
    op.create_table('wishlists',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['catalog.products.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'product_id', name='uq_wishlist_user_product'),
    schema='catalog',
    comment='User ←→ Product favorites',
    postgresql_partition_by=None
    )
    op.create_table('cart_items',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('cart_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('line_total', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['cart_id'], ['orders.carts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['catalog.products.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('cart_id', 'product_id', name='uq_cartitem_cart_product'),
    schema='orders'
    )
    op.create_table('orders',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('status_id', sa.UUID(), nullable=False),
    sa.Column('cart_id', sa.UUID(), nullable=True),
    sa.Column('order_number', sa.String(), nullable=True),
    sa.Column('subtotal', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('discount_total', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('shipping_total', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('tax_total', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('grand_total', sa.Numeric(precision=14, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=True),
    sa.Column('coupon_code', sa.String(), nullable=True),
    sa.Column('placed_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('shipping_full_name', sa.String(), nullable=True),
    sa.Column('shipping_address', sa.String(), nullable=True),
    sa.Column('shipping_city', sa.String(), nullable=True),
    sa.Column('shipping_state', sa.String(), nullable=True),
    sa.Column('shipping_country', sa.String(), nullable=True),
    sa.Column('shipping_postal_code', sa.String(), nullable=True),
    sa.Column('shipping_phone', sa.String(), nullable=True),
    sa.Column('billing_full_name', sa.String(), nullable=True),
    sa.Column('billing_address', sa.String(), nullable=True),
    sa.Column('billing_city', sa.String(), nullable=True),
    sa.Column('billing_state', sa.String(), nullable=True),
    sa.Column('billing_country', sa.String(), nullable=True),
    sa.Column('billing_postal_code', sa.String(), nullable=True),
    sa.Column('billing_phone', sa.String(), nullable=True),
    sa.Column('payment_status', sa.String(), nullable=True),
    sa.Column('paid_at', sa.DateTime(), nullable=True),
    sa.Column('payment_method_id', sa.UUID(), nullable=True),
    sa.Column('payment_provider', sa.String(), nullable=True),
    sa.Column('total_paid', sa.Numeric(precision=14, scale=2), nullable=False),
    sa.Column('payment_failure_reason', sa.String(), nullable=True),
    sa.CheckConstraint('subtotal >= 0 AND discount_total >= 0 AND shipping_total >= 0 AND tax_total >= 0 AND grand_total >= 0', name='chk_order_totals_nonneg'),
    sa.ForeignKeyConstraint(['cart_id'], ['orders.carts.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['payment_method_id'], ['payments.payment_methods.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['status_id'], ['orders.order_status.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('order_number'),
    schema='orders'
    )
    op.create_index('idx_orders_user_placed', 'orders', ['user_id', 'placed_at'], unique=False, schema='orders')
    op.create_table('coupon_product',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('coupon_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['coupon_id'], ['promotions.coupons.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['catalog.products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('coupon_id', 'product_id', name='uq_coupon_product'),
    schema='promotions'
    )
    op.create_table('product_suppliers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('vendor_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=True),
    sa.Column('variant_id', sa.UUID(), nullable=True),
    sa.Column('supplier_sku', sa.String(), nullable=False),
    sa.Column('cost', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('msrp', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('min_order_qty', sa.Integer(), nullable=True),
    sa.Column('lead_time_days', sa.Integer(), nullable=True),
    sa.Column('product_url', sa.String(), nullable=True),
    sa.Column('availability', sa.String(), nullable=True),
    sa.Column('last_synced_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('(product_id IS NOT NULL AND variant_id IS NULL) OR (product_id IS NULL AND variant_id IS NOT NULL)', name='chk_supplier_product_xor_variant'),
    sa.ForeignKeyConstraint(['product_id'], ['catalog.products.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['variant_id'], ['catalog.product_variants.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['vendor_id'], ['catalog.vendors.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('vendor_id', 'product_id', name='uq_vendor_product'),
    sa.UniqueConstraint('vendor_id', 'variant_id', name='uq_vendor_variant'),
    schema='catalog'
    )
    op.create_table('variant_options',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('variant_id', sa.UUID(), nullable=False),
    sa.Column('attribute_id', sa.UUID(), nullable=False),
    sa.Column('value', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['attribute_id'], ['catalog.attributes.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['variant_id'], ['catalog.product_variants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('variant_id', 'attribute_id', name='uq_variant_attr'),
    schema='catalog'
    )
    op.create_table('order_items',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('product_name', sa.String(), nullable=False),
    sa.Column('sku', sa.String(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('line_total', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.orders.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['catalog.products.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    schema='orders'
    )
    op.create_table('purchase_orders',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('vendor_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('total_cost', sa.Numeric(precision=14, scale=2), nullable=True),
    sa.Column('external_id', sa.String(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('total_cost >= 0', name='chk_po_total_nonneg'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.orders.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['vendor_id'], ['catalog.vendors.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    schema='orders'
    )
    op.create_index('idx_po_order_vendor', 'purchase_orders', ['order_id', 'vendor_id'], unique=False, schema='orders')
    op.create_table('transactions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('payment_method_id', sa.UUID(), nullable=True),
    sa.Column('amount', sa.Numeric(precision=14, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('provider', sa.String(), nullable=True),
    sa.Column('provider_transaction_id', sa.String(), nullable=True),
    sa.Column('idempotency_key', sa.String(), nullable=True),
    sa.Column('failure_code', sa.String(), nullable=True),
    sa.Column('failure_message', sa.String(), nullable=True),
    sa.Column('raw_request', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('raw_response', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('authorized_at', sa.DateTime(), nullable=True),
    sa.Column('captured_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('amount >= 0', name='chk_tx_amount_nonneg'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.orders.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['payment_method_id'], ['payments.payment_methods.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('idempotency_key'),
    schema='payments'
    )
    op.create_index('idx_tx_order_created', 'transactions', ['order_id', 'created_at'], unique=False, schema='payments')
    op.create_table('coupon_redemptions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('coupon_id', sa.UUID(), nullable=False),
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('amount_applied', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['coupon_id'], ['promotions.coupons.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.orders.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('coupon_id', 'order_id', name='uq_coupon_order_once'),
    schema='promotions'
    )
    op.create_table('order_coupons',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('coupon_id', sa.UUID(), nullable=False),
    sa.Column('amount_applied', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['coupon_id'], ['promotions.coupons.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.orders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('order_id', 'coupon_id', name='uq_order_coupon_once'),
    schema='promotions'
    )
    op.create_table('shipments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('carrier_id', sa.UUID(), nullable=True),
    sa.Column('carrier_code', sa.String(), nullable=True),
    sa.Column('service_code', sa.String(), nullable=True),
    sa.Column('tracking_number', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('cost', sa.Numeric(precision=14, scale=2), nullable=False),
    sa.Column('shipped_at', sa.DateTime(), nullable=True),
    sa.Column('delivered_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('update_at', sa.DateTime(), nullable=True),
    sa.Column('to_address_id', sa.UUID(), nullable=True),
    sa.CheckConstraint('cost >= 0', name='chk_shipment_cost_nonneg'),
    sa.ForeignKeyConstraint(['carrier_id'], ['shipping.carriers.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.orders.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['to_address_id'], ['shipping.addresses.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tracking_number'),
    schema='shipping'
    )
    op.create_index('idx_shipment_order_created', 'shipments', ['order_id', 'created_at'], unique=False, schema='shipping')
    op.create_table('tickets',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('order_id', sa.UUID(), nullable=True),
    sa.Column('subject', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('priority', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('closed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.orders.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    schema='support'
    )
    op.create_table('purchase_order_items',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('purchase_order_id', sa.UUID(), nullable=False),
    sa.Column('order_item_id', sa.UUID(), nullable=False),
    sa.Column('product_supplier_id', sa.UUID(), nullable=True),
    sa.Column('supplier_sku', sa.String(), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unit_cost', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('line_cost', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('quantity > 0', name='chk_poi_qty_positive'),
    sa.CheckConstraint('unit_cost >= 0 AND line_cost >= 0', name='chk_poi_costs_nonneg'),
    sa.ForeignKeyConstraint(['order_item_id'], ['orders.order_items.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['product_supplier_id'], ['catalog.product_suppliers.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['purchase_order_id'], ['orders.purchase_orders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='orders'
    )
    op.create_index('idx_poi_po', 'purchase_order_items', ['purchase_order_id'], unique=False, schema='orders')
    op.create_table('refunds',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('transaction_id', sa.UUID(), nullable=False),
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=14, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('provider', sa.String(), nullable=False),
    sa.Column('provider_refund_id', sa.String(), nullable=True),
    sa.Column('failure_code', sa.String(), nullable=True),
    sa.Column('failure_message', sa.String(), nullable=True),
    sa.Column('raw_response', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('amount >= 0', name='chk_refund_amount_nonneg'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.orders.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['transaction_id'], ['payments.transactions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='payments'
    )
    op.create_table('reviews',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('product_id', sa.UUID(), nullable=True),
    sa.Column('variant_id', sa.UUID(), nullable=True),
    sa.Column('order_item_id', sa.UUID(), nullable=True),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('body', sa.Text(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('reported_count', sa.Integer(), nullable=False),
    sa.Column('helpful_count', sa.Integer(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('veified_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('update_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('(product_id IS NOT NULL AND variant_id IS NULL) OR (product_id IS NULL AND variant_id IS NOT NULL)', name='chk_review_product_xor_variant'),
    sa.CheckConstraint('rating BETWEEN 1 AND 5', name='chk_review_rating_1_5'),
    sa.ForeignKeyConstraint(['order_item_id'], ['orders.order_items.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['product_id'], ['catalog.products.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['variant_id'], ['catalog.product_variants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='reviews'
    )
    op.create_table('shipment_items',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('shipment_id', sa.UUID(), nullable=False),
    sa.Column('order_item_id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('quantity > 0', name='chk_shipment_item_qty_positive'),
    sa.ForeignKeyConstraint(['order_item_id'], ['orders.order_items.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['shipment_id'], ['shipping.shipments.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('shipment_id', 'order_item_id', name='uq_shipmentitem_unique_line'),
    schema='shipping'
    )
    op.create_table('tracking_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('shipment_id', sa.UUID(), nullable=False),
    sa.Column('status_code', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('event_at', sa.DateTime(), nullable=False),
    sa.Column('raw', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['shipment_id'], ['shipping.shipments.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='shipping'
    )
    op.create_table('messages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('ticket_id', sa.UUID(), nullable=False),
    sa.Column('sender_id', sa.UUID(), nullable=True),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('is_staff', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['sender_id'], ['auth.users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['ticket_id'], ['support.tickets.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='support'
    )
    op.create_table('comments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('review_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['review_id'], ['reviews.reviews.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    schema='reviews'
    )
    op.create_table('review_images',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('review_id', sa.UUID(), nullable=False),
    sa.Column('image_url', sa.String(), nullable=False),
    sa.Column('alt_text', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['review_id'], ['reviews.reviews.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='reviews'
    )
    op.create_table('review_votes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('review_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('helpful', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['review_id'], ['reviews.reviews.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('review_id', 'user_id', name='uq_review_vote_user'),
    schema='reviews'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('review_votes', schema='reviews')
    op.drop_table('review_images', schema='reviews')
    op.drop_table('comments', schema='reviews')
    op.drop_table('messages', schema='support')
    op.drop_table('tracking_events', schema='shipping')
    op.drop_table('shipment_items', schema='shipping')
    op.drop_table('reviews', schema='reviews')
    op.drop_table('refunds', schema='payments')
    op.drop_index('idx_poi_po', table_name='purchase_order_items', schema='orders')
    op.drop_table('purchase_order_items', schema='orders')
    op.drop_table('tickets', schema='support')
    op.drop_index('idx_shipment_order_created', table_name='shipments', schema='shipping')
    op.drop_table('shipments', schema='shipping')
    op.drop_table('order_coupons', schema='promotions')
    op.drop_table('coupon_redemptions', schema='promotions')
    op.drop_index('idx_tx_order_created', table_name='transactions', schema='payments')
    op.drop_table('transactions', schema='payments')
    op.drop_index('idx_po_order_vendor', table_name='purchase_orders', schema='orders')
    op.drop_table('purchase_orders', schema='orders')
    op.drop_table('order_items', schema='orders')
    op.drop_table('variant_options', schema='catalog')
    op.drop_table('product_suppliers', schema='catalog')
    op.drop_table('coupon_product', schema='promotions')
    op.drop_index('idx_orders_user_placed', table_name='orders', schema='orders')
    op.drop_table('orders', schema='orders')
    op.drop_table('cart_items', schema='orders')
    op.drop_table('wishlists', schema='catalog')
    op.drop_table('product_variants', schema='catalog')
    op.drop_table('product_images', schema='catalog')
    op.drop_table('product_attributes', schema='catalog')
    op.drop_table('addresses', schema='shipping')
    op.drop_table('coupon_categories', schema='promotions')
    op.drop_table('coupon_brands', schema='promotions')
    op.drop_table('payment_methods', schema='payments')
    op.drop_table('carts', schema='orders')
    op.drop_table('slider_items', schema='content')
    op.drop_table('page_blocks', schema='content')
    op.drop_table('products', schema='catalog')
    op.drop_table('user_roles', schema='auth')
    op.drop_table('carriers', schema='shipping')
    op.drop_table('coupons', schema='promotions')
    op.drop_table('order_status', schema='orders')
    op.drop_table('sliders', schema='content')
    op.drop_table('pages', schema='content')
    op.drop_table('faqs', schema='content')
    op.drop_table('banners', schema='content')
    op.drop_table('vendors', schema='catalog')
    op.drop_table('categories', schema='catalog')
    op.drop_table('brands', schema='catalog')
    op.drop_table('attributes', schema='catalog')
    op.drop_index(op.f('ix_auth_users_email'), table_name='users', schema='auth')
    op.drop_table('users', schema='auth')
    op.drop_table('roles', schema='auth')
    # ### end Alembic commands ###
